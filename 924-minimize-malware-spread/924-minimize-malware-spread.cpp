class Solution {
public:
    vector<int> parent;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for(int i = 0;i<n;i++)  parent.push_back(i);
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(graph[i][j])
                    uni(i,j);
            }
        }
        vector<int> area(n,0), malware(n,0);
        for(int i=0;i<n;i++){
            area[find(i)]++;
        }
        for(int i: initial){
            malware[find(i)]++;
        }
        sort(initial.begin(), initial.end());
        int ans = initial[0], max_population = 0;
        for(auto i: initial) {
            if(malware[find(i)] == 1 && area[find(i)] > max_population){
                ans = i;
                max_population = area[find(i)];
            }
        }
        return ans;
    }
    int find(int x) {
        if(x != parent[x])
            parent[x] = find(parent[x]);
        return parent[x];
    }
    void uni(int x, int y){
        parent[find(x)] = find(y);
    }
};